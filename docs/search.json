[
  {
    "objectID": "HW4.html",
    "href": "HW4.html",
    "title": "Homework 4",
    "section": "",
    "text": "For this week, we learned things about data reading and manipulation in R, which I personally believe is an important part to learn. If you learned to do data manipulation, or handling in R well, then you will be independent from Excel and throw away that crutche. As tidyverse is a very versatile package completing this task, we need to install and use this package first.\nlibrary (tidyverse)\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nWarning: package 'tidyr' was built under R version 4.3.3\n\n\nWarning: package 'readr' was built under R version 4.3.3\n\n\nWarning: package 'dplyr' was built under R version 4.3.3\n\n\nWarning: package 'stringr' was built under R version 4.3.3\n\n\nWarning: package 'lubridate' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "HW4.html#if-your-working-directory-is-myfolderhomework-what-relative-path-would-you-specify-to-get-the-file-located-at-myfoldermydata.csv",
    "href": "HW4.html#if-your-working-directory-is-myfolderhomework-what-relative-path-would-you-specify-to-get-the-file-located-at-myfoldermydata.csv",
    "title": "Homework 4",
    "section": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\nI would do the following code to get at the directory name of the files. If we need to change the working directory into that folder, use this:\n\nsetwd (dirname(getwd())) read.csv (MyData.csv)\n\nIf we are just going to get the file, then\n\nread.csv (dirname(getwd()), MyData.csv)"
  },
  {
    "objectID": "HW4.html#what-are-the-major-benefits-of-using-r-projects",
    "href": "HW4.html#what-are-the-major-benefits-of-using-r-projects",
    "title": "Homework 4",
    "section": "What are the major benefits of using R projects",
    "text": "What are the major benefits of using R projects\n\n\nThe R projects are directly associated with a directory so each project has a designated one. This is far better way to organize all the data analysis! For example, it is much easier to import data if you put the raw data that is going to be needed in the same directory of your working directory. That way you could directly use relative file path.\nWith R project we could improve reproducibility because files were put in the same directory.\nThe R project improves the workflow of collaboration. One could choose to make a new version-controlled project to track all modifications and easily shared with other people for them to continue modify your work."
  },
  {
    "objectID": "HW4.html#what-is-git-and-what-is-github",
    "href": "HW4.html#what-is-git-and-what-is-github",
    "title": "Homework 4",
    "section": "What is git and what is github?",
    "text": "What is git and what is github?\n\nGit is a version control software and github is an online hosting service for git-based projects. The cool thing is that git keeps track of all files in the folder, which is called repo on github."
  },
  {
    "objectID": "HW4.html#what-are-the-two-main-differences-between-a-tibble-and-a-data.frame",
    "href": "HW4.html#what-are-the-two-main-differences-between-a-tibble-and-a-data.frame",
    "title": "Homework 4",
    "section": "What are the two main differences between a tibble and a data.frame?",
    "text": "What are the two main differences between a tibble and a data.frame?\n\n\nPrinting. When printing out a tibble, it would give out more concise and more aesthetic form, only show a few rows and columns. At the same time printing tibble each column also report its type.\nSubsetting. Tibbles are strict about subsetting. For data frame, df [,1] returns a data frame with the first column only, but for tibble, [,1] returns a vector."
  },
  {
    "objectID": "HW4.html#rewrite-the-following-nested-function-call-using-basers-chaining-operator",
    "href": "HW4.html#rewrite-the-following-nested-function-call-using-basers-chaining-operator",
    "title": "Homework 4",
    "section": "Rewrite the following nested function call using BaseR’s chaining operator:",
    "text": "Rewrite the following nested function call using BaseR’s chaining operator:\narrange (filter (select(as_tibble(iris), starts_with (“Petal”), Species), Petal.Length &lt; 1.55), Species)\n\nThe above code could be rewritten as the following code if with the chaining operator.\n\nas_tibble(iris) |&gt; select (starts_with (“Petal”), Species) |&gt; filter (Petal.Length &lt; 1.55) |&gt; arrange (Species)\nI like the chaining operator in BaseR |&gt; even better than %&gt;% because of its shape like an arrow. Meanwhile I understand %&gt;% might want people to think it looks like a metal chain, but instead it looks like a emoji to me."
  },
  {
    "objectID": "HW4.html#glass-data",
    "href": "HW4.html#glass-data",
    "title": "Homework 4",
    "section": "Glass data",
    "text": "Glass data\nFirst we want to import the data from the given URL, add column names and print out the data as a tibble. By looking at the data using text file reader first we know it is a comma delineated file and looks like pretty standard.\n\nglass &lt;- read_csv (\"https://www4.stat.ncsu.edu/~online/datasets/glass.data\", col_names = FALSE)\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead (glass,3)\n\n# A tibble: 3 × 11\n     X1    X2    X3    X4    X5    X6    X7    X8    X9   X10   X11\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0     0     1\n2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0     0     1\n3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0     0     1\n\n\nWe could see the data has already been imported as a tibble, and its columns have named X1 through X11. We could use the mutate function to change its column names into meaningful names and then print the tibble.\n\nglass_rename &lt;- glass |&gt; mutate (Id = X1, RI = X2, Na = X3, Mg = X4, Al = X5, Si = X6, K = X7, Ca = X8, Ba = X9, Fe = X10, TypeofGlass = X11, .keep = \"none\")\nprint (glass_rename)\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe TypeofGlass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;       &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0              1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0              1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0              1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0              1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0              1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26           1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0              1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0              1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0              1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11           1\n# ℹ 204 more rows\n\n\nThen we look at the value of the last variable: TypeofGlass. They are numeric but in factor they are factors with each number representing a different type of glass product. In addition, we wanted only to keep observations where Fe variable is less than 0.2 and the Type of Glass is either “tableware” or “headlamps”.\n\nglass_rename_new &lt;- glass_rename |&gt; mutate (TypeofGlass = ifelse(TypeofGlass == 1, \"building_windows_float_processed\",\n                                                                 ifelse (TypeofGlass == 2, \"building_windows_non_float_processed\",\n                                                                         ifelse (TypeofGlass ==3, \"vehicle_windows_float_processed\",\n                                                                                 ifelse (TypeofGlass == 4, \"vehicle_windows_non_float_processed\",\n                                                                                         ifelse (TypeofGlass == 5, \"containers\",\n                                                                                                 ifelse (TypeofGlass == 6, \"tableware\", \"headlamps\"))))))) |&gt;  filter (Fe &lt; 0.2 , TypeofGlass %in% c (\"tableware\", \"headlamps\"))\nprint (glass_rename_new)\n\n# A tibble: 38 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe TypeofGlass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware  \n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware  \n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware  \n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware  \n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware  \n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware  \n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware  \n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware  \n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware  \n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamps  \n# ℹ 28 more rows"
  },
  {
    "objectID": "HW4.html#yeast-data",
    "href": "HW4.html#yeast-data",
    "title": "Homework 4",
    "section": "Yeast data",
    "text": "Yeast data\nFirst open the file to see the delimiter type. Judging from the file it is a tab delimiter, then try using read_tsv to read those files.\n\nyeast918 &lt;- read_tsv (\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\", )\n\nRows: 1483 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): ADT1_YEAST  0.58  0.61  0.47  0.13  0.50  0.00  0.48  0.22  MIT\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nHowever we have got a character string, which means the delimiter is not tab, but may be two spaces.\n\nyeast918 &lt;- read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\", delim = \"  \", col_names = FALSE)\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 1484 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"  \"\nchr (2): X1, X10\ndbl (8): X2, X3, X4, X5, X6, X7, X8, X9\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead (yeast918)\n\n# A tibble: 6 × 10\n  X1            X2    X3    X4    X5    X6    X7    X8    X9 X10  \n  &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n\n\nThe data reading is successful. Now add the column names. Previously I used mutate function, which feels curbumsome. This time try the colnames () function.\n\ncolnames (yeast918) &lt;- c (\"seq_name\", \"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\", \"pox\", \"vac\", \"nuc\", \"class\")\nyeast918\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\nNow the column names are successfully added. Start from here we need to remove the seq_name and nuc columns, and then add new column to write in average value of each of numeric variable group by different class.\n\nyeast918_summarized &lt;- yeast918 |&gt; select (-seq_name, -nuc) |&gt; group_by (class) |&gt; mutate (across (where (is.numeric), .fns = mean, .names = \"mean_{.col}\"))\nhead (yeast918_summarized)\n\n# A tibble: 6 × 15\n# Groups:   class [3]\n    mcg   gvh   alm   mit   erl   pox   vac class mean_mcg mean_gvh mean_alm\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.521    0.531    0.519\n2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.521    0.531    0.519\n3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.521    0.531    0.519\n4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.453    0.458    0.529\n5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.521    0.531    0.519\n6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.480    0.469    0.536\n# ℹ 4 more variables: mean_mit &lt;dbl&gt;, mean_erl &lt;dbl&gt;, mean_pox &lt;dbl&gt;,\n#   mean_vac &lt;dbl&gt;\n\n\nLooks like we already got the mean value for each column, grouped by class."
  },
  {
    "objectID": "HW4.html#white-wine-data",
    "href": "HW4.html#white-wine-data",
    "title": "Homework 4",
    "section": "white wine data",
    "text": "white wine data\n\nData import\nSince I already downloaded the data in the data folder under my working directory of R, I will import it into R and print out the tibble.\n\nlibrary (readxl)\nwine918 &lt;- read_excel (\"data/white-wine.xlsx\")\nwine918\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\n\nRename columns (variables)\nNow rename the variable names with a blank within by reading in the variable names from the 2nd sheet of the same file. This time we need to use the excel_sheets() function to extract the 2nd excel sheet from the same excel file.\n\nwine918_2 &lt;- read_excel (\"data/white-wine.xlsx\", sheet = excel_sheets(\"data/white-wine.xlsx\")[2])\nwine918_2\n\n# A tibble: 12 × 1\n   Variables           \n   &lt;chr&gt;               \n 1 fixed_acidity       \n 2 volatile_acidity    \n 3 citric_acid         \n 4 residual_sugar      \n 5 chlorides           \n 6 free_sulfur_dioxide \n 7 total_sulfur_dioxide\n 8 density             \n 9 pH                  \n10 sulphates           \n11 alcohol             \n12 quality             \n\n\nThe 2nd excel sheet only contains the variable names in a format of a tibble. Then we use the function colname to rename the column of the wine data.\n\ncolnames(wine918) &lt;- wine918_2$Variables\nwine918\n\n# A tibble: 4,898 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\n\nAdding another column\nNow we want to add another column indicating the type of the wine.\n\nwine918_3 &lt;- wine918 |&gt; mutate (wine_type = \"white\")"
  },
  {
    "objectID": "HW4.html#red-wine-data",
    "href": "HW4.html#red-wine-data",
    "title": "Homework 4",
    "section": "Red wine data",
    "text": "Red wine data\nThis is a semi-colon delimited file. Read using the correct function\n\nlibrary (readr)\nredwine918 &lt;- read_delim (\"https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv\", delim = \";\")\n\nRows: 1599 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncolnames(redwine918) &lt;- wine918_2$Variables\nredwine918 &lt;- redwine918 |&gt; mutate (wine_type = \"red\")"
  },
  {
    "objectID": "HW4.html#data-combine-totalwine",
    "href": "HW4.html#data-combine-totalwine",
    "title": "Homework 4",
    "section": "Data combine: totalwine!",
    "text": "Data combine: totalwine!\nSince the white wine and red wine data have the same data structure and the same variables, let’s combine them!\n\ntotalwine918 &lt;- dplyr::bind_rows(wine918_3, redwine918)\n\nNow we are ready for some data manipulations!!\n\ntotalwine_919 &lt;- totalwine918 |&gt; filter (quality &gt;6.5, alcohol &lt; 132) |&gt; arrange (desc (quality)) |&gt; select (contains (\"acid\"), alcohol, wine_type, quality) |&gt; group_by(quality) |&gt; mutate (alcoholmean = mean (alcohol), alcoholsd = sd (alcohol))\ntotalwine_919\n\n# A tibble: 1,206 × 8\n# Groups:   quality [3]\n   fixed_acidity volatile_acidity citric_acid alcohol wine_type quality\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;\n 1            91             0.27        0.45     104 white           9\n 2            66             0.36        0.29     124 white           9\n 3            74             0.24        0.36     125 white           9\n 4            69             0.36        0.34     127 white           9\n 5            71             0.26        0.49     129 white           9\n 6            62             0.66        0.48     128 white           8\n 7            62             0.66        0.48     128 white           8\n 8            68             0.26        0.42     105 white           8\n 9            67             0.23        0.31     107 white           8\n10            67             0.23        0.31     107 white           8\n# ℹ 1,196 more rows\n# ℹ 2 more variables: alcoholmean &lt;dbl&gt;, alcoholsd &lt;dbl&gt;"
  }
]